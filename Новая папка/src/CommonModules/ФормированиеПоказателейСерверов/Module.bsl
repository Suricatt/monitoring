#Область Иницилазиация
// Описание
// 
// Возвращаемое значение: ТаблицаЗначений
// 	Описание
	Функция ИницилизироватьДанныеСерверов() Экспорт

		ТаблицаСерверов = Новый ТаблицаЗначений();
		ТаблицаСерверов.Колонки.Добавить("ИмяСервера");
		ТаблицаСерверов.Колонки.Добавить("ЛогинАдминистратора");
		ТаблицаСерверов.Колонки.Добавить("ПарольАдминистратора");
		ТаблицаСерверов.Колонки.Добавить("ПутьКФайлуДанных");

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	РабочиеСервера.Ссылка,
			|	РабочиеСервера.Наименование КАК ИмяСервера,
			| 	РабочиеСервера.Адрес,
			|	РабочиеСервера.ЛогинАдминистратора,
			|	РабочиеСервера.ПарольАдминистратора
			|ИЗ
			|	Справочник.РабочиеСервера КАК РабочиеСервера
			|ГДЕ
			|	РабочиеСервера.Аквтивность
			|	И
			|	НЕ РабочиеСервера.ПометкаУдаления";

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанынеСервер = ТаблицаСерверов.Добавить();
			ЗаполнитьЗначенияСвойств(ДанынеСервер, ВыборкаДетальныеЗаписи);
		КонецЦикла;

		Возврат ТаблицаСерверов;

	КонецФункции
#КонецОбласти

#Область ЗаполнениеДанных
// Описание
// 
// Параметры:
// 	ДанныеСерверов - Описание
// Возвращаемое значение:
// 	Описание
	Процедура ДобавитьДанныеДляОтправки(ДанныеСерверов) Экспорт

		ПараметрыДанных = Новый Структура();
		ПараметрыДанных.Вставить("Соединение", Новый COMОбъект("V83.COMConnector"));

		Для каждого ДанныеСервера Из ДанныеСерверов Цикл

			ДобавитьДанныеМониторинга(ПараметрыДанных, ДанныеСервера);

		КонецЦикла;

	КонецПроцедуры

	// Описание
	// 
	// Параметры:
	// 	ДанныеСервера - Строка - Описание
	Процедура ДобавитьДанныеМониторинга(ПараметрыДанных, ДанныеСервера)

		Соединение = ПараметрыДанных.Соединение;
		Агент = Соединение.ConnectAgent(ДанныеСервера.АдресСеврера);
		Кластер = Агент.GetClusters().GetValue(0);
		Агент.Authenticate(Кластер, ДанныеСервера.ЛогинАдминистратора, ДанныеСервера.ПарольАдминистратора);
		ДанныеСервера.ПутьКФайлуДанных = ДанныеДляОтправки(ДанныеСервера.ИмяСервера, Кластер, Агент);

	КонецПроцедуры

	// Описание
	// 
	// Параметры:
	// Возвращаемое значение:
	// 	Описание
	Функция ДанныеДляОтправки(ИмяСервера, Кластер, Агент) Экспорт

		МассивСессий = Агент.GetSessions(Кластер).Выгрузить();

		countSession = 0; // Счетчик сессий
		countHibernate = 0; // счетчик уснувших сессий

		//Монитор производительности
		МассивПроцессов = Агент.GetWorkingProcesses(Кластер).Выгрузить();
		AvgBackCallTime = 0;
		AvgCallTime = 0;

		MaxBackCallTime = 0;
		MaxCallTime = 0;

		MinBackCallTime = 999999999999;
		MinCallTime = 999999999999;

		Для каждого Процесс Из МассивПроцессов Цикл
			AvgBackCallTime = AvgBackCallTime + Процесс.AvgDBCallTime * 1000;
			AvgCallTime = AvgCallTime + Процесс.AvgCallTime * 1000;
			MinBackCallTime = Мин(MinBackCallTime, Процесс.AvgDBCallTime * 1000);
			MinCallTime = Мин(MinCallTime, Процесс.AvgCallTime * 1000);
			MaxBackCallTime = Макс(MaxBackCallTime, Процесс.AvgDBCallTime * 1000);
			MaxCallTime = Макс(MaxCallTime, Процесс.AvgCallTime * 1000);
		КонецЦикла;

		AvgCallTime = AvgCallTime / МассивПроцессов.Количество();
		AvgBackCallTime = AvgBackCallTime / МассивПроцессов.Количество();

		// показатели активных сессий
		durationCurrentDBMSМакс = 0;
		durationCurrentМакс = 0;
		dbProcTookМакс = 0;

		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("infoBase", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("AppID", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("userName", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("Host", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

		Для Каждого Сессия Из МассивСессий Цикл
			Если Сессия.AppID = "SrvrConsole" Тогда
				Продолжить; // пропускаем сессии консоли
			КонецЕсли;

			СтрТЗ = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЗ, Сессия);
			СтрТЗ.infoBase = Сессия.infoBase.Name;
			СтрТЗ.Количество = 1;

			countSession = countSession + 1;

			durationCurrentDBMSМакс = Макс(durationCurrentDBMSМакс, Сессия.durationCurrentDBMS);
			durationCurrentМакс = Макс(durationCurrentМакс, Сессия.durationCurrent);
			dbProcTookМакс = Макс(dbProcTookМакс, Сессия.dbProcTook);

			Если Сессия.Hibernate Тогда
				countHibernate = countHibernate + 1;
			КонецЕсли;
		КонецЦикла;

		// Получаем пользователей с большим количеством сеансов
		UserMaxCount = 0;
		UserMaxName = "";
		ТаблUserName = ТЗ.Скопировать();
		ТаблUserName.Свернуть("userName", "Количество");
		ТаблUserName.Сортировать("Количество Убыв");
		Для Каждого Стр Из ТаблUserName Цикл
			UserMaxCount = Стр.Количество;
			UserMaxName = Стр.userName;
			Прервать;
		КонецЦикла;

		// Получаем компьютеры с большим количеством сеансов
		HostMaxCount = 0;
		HostMaxName = "";
		ТаблHost = ТЗ.Скопировать();
		ТаблHost.Свернуть("Host", "Количество");
		ТаблHost.Сортировать("Количество Убыв");
		Для Каждого Стр Из ТаблHost Цикл
			HostMaxCount = Стр.Количество;
			HostMaxName = Стр.Host;
			Прервать;
		КонецЦикла;

		Строка = "- srv1c.avaible 1" + Символы.ПС;

		Строка = Строка + "- srv1c.sessions.count "
			+ Формат(countSession, "ЧН=0; ЧГ=0") + Символы.ПС;
		Строка = Строка + "- srv1c.hibernate.count "
			+ Формат(countHibernate, "ЧН=0; ЧГ=0") + Символы.ПС;
		Строка = Строка + "- srv1c.dbproctook.current "
			+ Формат(dbProcTookМакс, "ЧН=0; ЧГ=0") + Символы.ПС;
		Строка = Строка + "- srv1c.duration.current.dbms "
			+ Формат(durationCurrentDBMSМакс, "ЧН=0; ЧГ=0") + Символы.ПС;
		Строка = Строка + "- srv1c.duration.current.1c "
			+ Формат(durationCurrentМакс, "ЧН=0; ЧГ=0") + Символы.ПС;

		Строка = Строка + "- srv1c.AvgCallTime.current "
			+ СтрЗаменить(Формат(AvgCallTime, "ЧДЦ=0; ЧН=0"), ",", ".") + Символы.ПС;
		Строка = Строка + "- srv1c.AvgBackCallTime.current "
			+ СтрЗаменить(Формат(AvgBackCallTime, "ЧДЦ=0; ЧН=0"), ",", ".")
			+ Символы.ПС;

		Строка = Строка + "- srv1c.MinBackCallTime.current "
			+ СтрЗаменить(Формат(MinBackCallTime, "ЧДЦ=0; ЧН=0"), ",", ".")
			+ Символы.ПС;
		Строка = Строка + "- srv1c.MinCallTime.current "
			+ СтрЗаменить(Формат(MinCallTime, "ЧДЦ=0; ЧН=0"), ",", ".") + Символы.ПС;
		Строка = Строка + "- srv1c.MaxBackCallTime.current "
			+ СтрЗаменить(Формат(MaxBackCallTime, "ЧДЦ=0; ЧН=0"), ",", ".")
			+ Символы.ПС;
		Строка = Строка + "- srv1c.MaxCallTime.current "
			+ СтрЗаменить(Формат(MaxCallTime, "ЧДЦ=0; ЧН=0"), ",", ".") + Символы.ПС;

		Строка = Строка + "- srv1c.user.count " + Формат(UserMaxCount, "ЧН=0; ЧГ=0")
			+ Символы.ПС;
		Строка = Строка + "- srv1c.host.count " + Формат(HostMaxCount, "ЧН=0; ЧГ=0")
			+ Символы.ПС;
		Строка = Строка + "- srv1c.user.name " + """" + UserMaxName + """"
			+ Символы.ПС;
		Строка = Строка + "- srv1c.host.name " + """" + HostMaxName + """"
			+ Символы.ПС;

		ИмяФайла = "c:\zabbix_agent\tmp" + ИмяСервера + ".txt";
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "CESU-8", Символы.ПС, Ложь, Символы.ПС); //ТекстБезБОМ
		ЗаписьТекста.Записать(Строка);
		ЗаписьТекста.Закрыть();

		Возврат ИмяФайла;

	КонецФункции
#КонецОбласти